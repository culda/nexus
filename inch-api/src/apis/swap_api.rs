/*
 * 1inch Aggregation protocol API
 *
 *  <h2>Ethereum Network</h2> Using 1inch Aggregation protocol API, you can find the best route to exchange assets and make the exchange. <br><br> Step by step: 1. Lookup addresses of tokens you want to swap, for example ‘0xxx’ , ‘0xxxx’ for DAI -> 1INCH 2. Check for allowance of 1inch router contract to spend source asset (/approve/allowance) 3. If necessary, give approval for 1inch router to spend source token (/approve/transaction) 4. Monitor the best exchange route using (/quote) 5. When you ready use to perform swap (/swap)
 *
 * The version of the OpenAPI document: 5.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::apis::ResponseContent;

/// struct for typed errors of method [`exchange_controller_get_quote`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExchangeControllerGetQuoteError {
    Status400(crate::models::SwapErrorDto),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`exchange_controller_get_swap`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExchangeControllerGetSwapError {
    Status400(crate::models::SwapErrorDto),
    UnknownValue(serde_json::Value),
}

pub async fn exchange_controller_get_quote(
    configuration: &configuration::Configuration,
    from_token_address: &str,
    to_token_address: &str,
    amount: &str,
    protocols: Option<&str>,
    fee: Option<&str>,
    gas_limit: Option<f32>,
    connector_tokens: Option<serde_json::Value>,
    complexity_level: Option<f32>,
    main_route_parts: Option<serde_json::Value>,
    parts: Option<serde_json::Value>,
    gas_price: Option<&str>,
) -> Result<crate::models::QuoteResponseDto, Error<ExchangeControllerGetQuoteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v5.0/1/quote", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder =
        local_var_req_builder.query(&[("fromTokenAddress", &from_token_address.to_string())]);
    local_var_req_builder =
        local_var_req_builder.query(&[("toTokenAddress", &to_token_address.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("amount", &amount.to_string())]);
    if let Some(ref local_var_str) = protocols {
        local_var_req_builder =
            local_var_req_builder.query(&[("protocols", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fee {
        local_var_req_builder = local_var_req_builder.query(&[("fee", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = gas_limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("gasLimit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = connector_tokens {
        local_var_req_builder =
            local_var_req_builder.query(&[("connectorTokens", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = complexity_level {
        local_var_req_builder =
            local_var_req_builder.query(&[("complexityLevel", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = main_route_parts {
        local_var_req_builder =
            local_var_req_builder.query(&[("mainRouteParts", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parts {
        local_var_req_builder =
            local_var_req_builder.query(&[("parts", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = gas_price {
        local_var_req_builder =
            local_var_req_builder.query(&[("gasPrice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;

    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;
    println!("local_var_content: {:?}", local_var_content);

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExchangeControllerGetQuoteError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn exchange_controller_get_swap(
    configuration: &configuration::Configuration,
    from_token_address: &str,
    to_token_address: &str,
    amount: &str,
    from_address: &str,
    slippage: f32,
    protocols: Option<&str>,
    dest_receiver: Option<&str>,
    referrer_address: Option<&str>,
    fee: Option<&str>,
    disable_estimate: Option<bool>,
    permit: Option<&str>,
    compatibility_mode: Option<bool>,
    burn_chi: Option<bool>,
    allow_partial_fill: Option<bool>,
    parts: Option<serde_json::Value>,
    main_route_parts: Option<serde_json::Value>,
    connector_tokens: Option<serde_json::Value>,
    complexity_level: Option<f32>,
    gas_limit: Option<&str>,
    gas_price: Option<&str>,
) -> Result<crate::models::SwapResponseDto, Error<ExchangeControllerGetSwapError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v5.0/1/swap", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder =
        local_var_req_builder.query(&[("fromTokenAddress", &from_token_address.to_string())]);
    local_var_req_builder =
        local_var_req_builder.query(&[("toTokenAddress", &to_token_address.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("amount", &amount.to_string())]);
    local_var_req_builder =
        local_var_req_builder.query(&[("fromAddress", &from_address.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("slippage", &slippage.to_string())]);
    if let Some(ref local_var_str) = protocols {
        local_var_req_builder =
            local_var_req_builder.query(&[("protocols", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = dest_receiver {
        local_var_req_builder =
            local_var_req_builder.query(&[("destReceiver", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = referrer_address {
        local_var_req_builder =
            local_var_req_builder.query(&[("referrerAddress", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fee {
        local_var_req_builder = local_var_req_builder.query(&[("fee", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = disable_estimate {
        local_var_req_builder =
            local_var_req_builder.query(&[("disableEstimate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = permit {
        local_var_req_builder =
            local_var_req_builder.query(&[("permit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = compatibility_mode {
        local_var_req_builder =
            local_var_req_builder.query(&[("compatibilityMode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = burn_chi {
        local_var_req_builder =
            local_var_req_builder.query(&[("burnChi", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = allow_partial_fill {
        local_var_req_builder =
            local_var_req_builder.query(&[("allowPartialFill", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parts {
        local_var_req_builder =
            local_var_req_builder.query(&[("parts", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = main_route_parts {
        local_var_req_builder =
            local_var_req_builder.query(&[("mainRouteParts", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = connector_tokens {
        local_var_req_builder =
            local_var_req_builder.query(&[("connectorTokens", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = complexity_level {
        local_var_req_builder =
            local_var_req_builder.query(&[("complexityLevel", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = gas_limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("gasLimit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = gas_price {
        local_var_req_builder =
            local_var_req_builder.query(&[("gasPrice", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExchangeControllerGetSwapError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
