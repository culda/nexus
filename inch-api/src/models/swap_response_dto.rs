/*
 * 1inch Aggregation protocol API
 *
 *  <h2>Ethereum Network</h2> Using 1inch Aggregation protocol API, you can find the best route to exchange assets and make the exchange. <br><br> Step by step: 1. Lookup addresses of tokens you want to swap, for example ‘0xxx’ , ‘0xxxx’ for DAI -> 1INCH 2. Check for allowance of 1inch router contract to spend source asset (/approve/allowance) 3. If necessary, give approval for 1inch router to spend source token (/approve/transaction) 4. Monitor the best exchange route using (/quote) 5. When you ready use to perform swap (/swap)  
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SwapResponseDto {
    #[serde(rename = "fromToken")]
    pub from_token: Box<crate::models::QuoteResponseDtoFromToken>,
    #[serde(rename = "toToken")]
    pub to_token: Box<crate::models::QuoteResponseDtoToToken>,
    /// Expected amount of destination token
    #[serde(rename = "toTokenAmount")]
    pub to_token_amount: String,
    /// Amount of source token
    #[serde(rename = "fromTokenAmount")]
    pub from_token_amount: String,
    /// Selected protocols in a path
    #[serde(rename = "protocols")]
    pub protocols: Vec<Vec<Vec<crate::models::PathViewDto>>>,
    #[serde(rename = "tx")]
    pub tx: Box<crate::models::SwapResponseDtoTx>,
}

impl SwapResponseDto {
    pub fn new(from_token: crate::models::QuoteResponseDtoFromToken, to_token: crate::models::QuoteResponseDtoToToken, to_token_amount: String, from_token_amount: String, protocols: Vec<Vec<Vec<crate::models::PathViewDto>>>, tx: crate::models::SwapResponseDtoTx) -> SwapResponseDto {
        SwapResponseDto {
            from_token: Box::new(from_token),
            to_token: Box::new(to_token),
            to_token_amount,
            from_token_amount,
            protocols,
            tx: Box::new(tx),
        }
    }
}


